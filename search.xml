<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Notes on Coursera&#39;s &quot;The Future of Payment Technology&quot;</title>
      <link href="2021/02/22/fintech/"/>
      <url>2021/02/22/fintech/</url>
      
        <content type="html"><![CDATA[<p><img src="https://lh3.googleusercontent.com/CSnS0D-nXCb0HdsbSarArFZ30PcP5fJSeWeTn9Jj7yWtjsu4lI-W7dfvJfxCFJWVzc3aQLX1ZQTy2JTgvNOHH79imjmZN5-7rOeMTxKOQQLiNoDy4T3NEJM5WieZVtknmdSjieqIUA=w2400"></p><blockquote><p>This is my notes on Coursera’s <a href="https://www.coursera.org/learn/paytech">“The Future of Payment Technology”</a> course. During this learning I came across DeFi (decentralized finance) that interests me a lot. I may have a future blog about DeFi.</p></blockquote><h3 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h3><p>Traditional banking’s service includes three major services: <strong>Transferring</strong> money, <strong>Raising</strong> money, and <strong>Investing</strong> money. FinTech innovates every aspect with technology advantage.  </p><p><img src="https://lh3.googleusercontent.com/W6QRipiueBG_iD-gE38wFzyoA6Z0oKKdAE9PI-71dEAucztVcs1Wut8uOpBx7gr_JV34NLE6KaL1WNUKGveBPw37mm-eOHxMNRB-kjkYaRXDbLLiBARjdkDvkggzyvK1lc0YRppQ=w2400"></p><h4 id="i-The-Checking-System-and-the-Importance-of-Financial-Intermediation"><a href="#i-The-Checking-System-and-the-Importance-of-Financial-Intermediation" class="headerlink" title="i. The Checking System and the Importance of Financial Intermediation"></a>i. The Checking System and the Importance of Financial Intermediation</h4><p><img src="https://lh3.googleusercontent.com/DJwwO5KjKwBGorLt0F7KMQuPtO5U_mxKWdSFfNdoxfJ6Wkg1xrpwa0UuR6Pb0g0QvaaB_jhYXUi77_aYdM4DHtWN2KDy9JZWruOQftT_oqQXuDNTb2wIJwPXKkXCbulG4DnI35u9=w2400"></p><h5 id="a-Limitations"><a href="#a-Limitations" class="headerlink" title="a. Limitations"></a>a. Limitations</h5><ol><li>Takes a long time to complete transactions</li><li>Theoretically possible to spend the same money more than once</li></ol><h5 id="b-Importance-of-Financial-Intermediation"><a href="#b-Importance-of-Financial-Intermediation" class="headerlink" title="b. Importance of Financial Intermediation"></a>b. Importance of Financial Intermediation</h5><p>Essentially to allow transactions with <strong>untrusted</strong> parties with <strong>asymmetric</strong> information.</p><ol><li>Reversibility of check payment</li><li>Pre-authorization of funds</li><li>Electronic routing &amp; verification</li></ol><h4 id="ii-Electronic-Fund-Transfers-Using-Automated-Clearing-House-ACH"><a href="#ii-Electronic-Fund-Transfers-Using-Automated-Clearing-House-ACH" class="headerlink" title="ii. Electronic Fund Transfers Using Automated Clearing House (ACH)"></a>ii. Electronic Fund Transfers Using Automated Clearing House (ACH)</h4><h5 id="a-What-is-ACH"><a href="#a-What-is-ACH" class="headerlink" title="a. What is ACH"></a>a. What is ACH</h5><p><img src="https://lh3.googleusercontent.com/nvJARY5sMuXbDuISt1gjUTBUe7V0uqN7ENamFRh0eolUZnRul1XbQVIinjAjOPC2-dv3y2ZCGeFuHffv_UjFw-ME_qLg7C4aVa3zdAfPsiykJicEaWNP3H2aDRBFxStakj5WslaV=w2400"></p><p><img src="https://lh3.googleusercontent.com/jFe8PWbDPBDDasIRbu1Oe9GjwzvUyWiUeBzzNS6tSLntr_07FEqXQolkyOwZ9FY9dkwyWoYqTXN4DZ1euo5JZprBqA9IhtyWzwErW7b7I6UoTdp5VNH0Ly_-A0Iir5mY4BKuwV7L=w2400"></p><h5 id="b-Advantages"><a href="#b-Advantages" class="headerlink" title="b. Advantages"></a>b. Advantages</h5><ol><li>Information flow in the system evolved from physical to the digital form</li><li>Significantly improved clearing speed</li><li>Lower fraud potentials</li></ol><h3 id="2-Digital-Wallets"><a href="#2-Digital-Wallets" class="headerlink" title="2. Digital Wallets"></a>2. Digital Wallets</h3><h4 id="i-Pure-Digital-Wallets"><a href="#i-Pure-Digital-Wallets" class="headerlink" title="i. Pure Digital Wallets"></a>i. Pure Digital Wallets</h4><ul><li>Examples: Paypal</li><li>The “real-time” transaction happens within PayPal’s Bank account by rewriting the balance to a different user.</li><li>Business model: free to most; Premium for instant withdraw; charge on credit card</li><li>How to profit:<ol><li>use existing payment rails (AHC for example), so low fixed cost</li><li>Easy to scale so low marginal costs</li></ol></li></ul><p><img src="https://lh3.googleusercontent.com/vFhBXr7qWmyVcx_qJt4IpSINKPywYu9luNnfjJW6vRgSWwnpsyq9t_ksNQuXhFc2yJFPY8FKTBzh15n9jzGIBeGWBuezysq-LT8KgaKwMQT7HN1Ps_ygh1_eE3bNSDZx7l0x41CD=w2400"></p><h4 id="ii-From-Pure-Wallets-to-Payment-Ecosystem"><a href="#ii-From-Pure-Wallets-to-Payment-Ecosystem" class="headerlink" title="ii. From Pure Wallets to Payment Ecosystem"></a>ii. From Pure Wallets to Payment Ecosystem</h4><p>Address several challenges:</p><ol><li>Product differentiations</li><li>Incentives for users to keep balance within the wallets and not withdrawing right away</li><li>Appeal to offline users</li><li>Add-on services with higher margins</li></ol><p><img src="https://lh3.googleusercontent.com/lPIx8FiAs0tMF2zJoySmx8hZkBoe0Ev8I9AYAZJKNeM0c0wi2kkRGKJs70LLUHBRsSMXGMKP365UtZfUGS_Sav2wc9Pu_X8X4QSzIDNC7M5R20Fm2onBmMSDblf9QigjYkbHFPdV=w2400"></p><h4 id="iii-Social-Network-Based-Payment-Innovations"><a href="#iii-Social-Network-Based-Payment-Innovations" class="headerlink" title="iii. Social-Network-Based Payment Innovations"></a>iii. Social-Network-Based Payment Innovations</h4><p>Examples: Venmo (payment as a mean of social communications); WeChat: from social network to payment platform</p><h3 id="3-Credit-Card-Innovations"><a href="#3-Credit-Card-Innovations" class="headerlink" title="3. Credit Card Innovations"></a>3. Credit Card Innovations</h3><h4 id="i-Origin-key-stakeholder-and-business-models-of-the-credit-card-network"><a href="#i-Origin-key-stakeholder-and-business-models-of-the-credit-card-network" class="headerlink" title="i. Origin, key stakeholder and business models of the credit card network`"></a>i. Origin, key stakeholder and business models of the credit card network`</h4><h5 id="a-Origin"><a href="#a-Origin" class="headerlink" title="a. Origin"></a>a. Origin</h5><ul><li>Bank extends a revolving line of credit to customers</li><li>Within the line of credit, the bank guarantees real-time availability for funds to merchants, while bills customers later and bears all default risks</li><li>Charge merchants for these costs</li></ul><h5 id="b-Key-stakeholder"><a href="#b-Key-stakeholder" class="headerlink" title="b. Key stakeholder"></a>b. Key stakeholder</h5><ul><li>Card-issuing bank</li><li>Cardholder</li><li>Service Provider</li><li>Merchant bank</li><li>Card acceptor</li></ul><p><img src="https://lh3.googleusercontent.com/jBiOpRJjX-TolXm4kLxvn8qtTAmBG22AJ_QviIh15zByz9ev8itmEs0nl5DuqTPOU7GO5OXVbwgRQc8JTKPKfk_MyaS8ov9PICwEIUSh7s5oHH3se7y8bKXdO4Fq_ef4jYQVKbjU=w2400"></p><h5 id="c-Business-Models"><a href="#c-Business-Models" class="headerlink" title="c. Business Models"></a>c. Business Models</h5><ol><li>Card networks (e.g., Visa)<ul><li>set overall processing fees, but do not get the biggest share.</li><li>have a high fixed cost and low marginal cost</li><li>Competitors: issuer-run networks</li></ul></li><li>Issuers<ul><li>Get most of the fees, but bear the risks</li></ul></li><li>Acquirers provide fund settlement services and maintain merchant accounts</li><li>Processors provide hardware to process payment requests</li></ol><h5 id="d-Advantages-and-Inefficiencies"><a href="#d-Advantages-and-Inefficiencies" class="headerlink" title="d. Advantages and Inefficiencies"></a>d. Advantages and Inefficiencies</h5><ul><li>Advantages<ol><li>Efficient and near-instant transaction clearance</li><li>Value-added services for consumers</li></ol></li><li>Drawbacks<ol><li>Security issues</li><li>Limited customer base</li></ol></li></ul><h4 id="ii-Innovations-that-make-credit-card-transactions-more-secure"><a href="#ii-Innovations-that-make-credit-card-transactions-more-secure" class="headerlink" title="ii. Innovations that make credit card transactions more secure"></a>ii. Innovations that make credit card transactions more secure</h4><ul><li>EMV (chip cards) helps reducing card skimming and duplication (capture static accounts physically at the points of sale)</li><li>Tokenization helps merchants to encrypt data for stored card information</li><li>Mobile-based security helps guard end-users directly</li></ul><p><img src="https://lh3.googleusercontent.com/P4C5PJg5Yhb9SNqYoet5QhmTMj1GTVUsghUNo9PLUzCog_i33WlGTnjH7039tI6FZLH6soqf2a9CZLkJObss9j4LUxausAOiHCCRB7CZ6p6Tc9lUfXJ1ZdzJeR67muus2LyzCCmKAg=w2400"></p><p>Apple Pay as an example: card number only stores at the high-secured bankside</p><p><img src="https://lh3.googleusercontent.com/y153ciunuuyjXSkiALyKhLVC7ru1AL5tC5uf1IqopqEvhlBVwW8DsAVR95MjlE8RWIy6aJCFoh6HbrV5XDAswefD6FJP1AYYU09RzHB_UDBsD6I-Pg6C2255kvn6fHdaOeH1hRRfpQ=w2400"></p><h4 id="iii-Innovations-that-expand-credit-cards’-customer-base"><a href="#iii-Innovations-that-expand-credit-cards’-customer-base" class="headerlink" title="iii. Innovations that expand credit cards’ customer base"></a>iii. Innovations that expand credit cards’ customer base</h4><h5 id="a-Offline-payment-gateway"><a href="#a-Offline-payment-gateway" class="headerlink" title="a. Offline payment gateway"></a>a. Offline payment gateway</h5><ul><li>Small business prefer convenience &amp; low cost over fancy tech, so use existing devices like POS terminals</li><li>Examples: Square, an independent payment processor that facilitates card acceptance</li></ul><h5 id="b-Online-payment-gateway"><a href="#b-Online-payment-gateway" class="headerlink" title="b. Online payment gateway"></a>b. Online payment gateway</h5><ul><li>Small business can not afford a dedicated IT team for card network connections, so provide plug-in software connections  </li><li>Examples: Square, an independent payment processor that facilitates card acceptance by online merchants</li></ul><h3 id="Payment-Technology-in-Emerging-Markets"><a href="#Payment-Technology-in-Emerging-Markets" class="headerlink" title="Payment Technology in Emerging Markets"></a>Payment Technology in Emerging Markets</h3><p>Take M-PESA as an examples<br><img src="https://lh3.googleusercontent.com/KktbO3iche8B5TXFZ8iZbOkD41dys6c23a69PurUoj64Q6EOP1Z6pH04lgA7NR2R4tYP1RQ10eZA4aQ2KG02wn8r5MQjBtWTWTDH3ZDmOTPTm6hnm_uidpQOefu3CpWCu-5MCEjcJg=w2400"></p><p>Reference</p><ol><li><a href="https://www.coursera.org/learn/paytech">https://www.coursera.org/learn/paytech</a></li><li><a href="https://www.pngkey.com/detail/u2t4o0u2w7t4w7a9_cashless-society-bills-payment-icon/">https://www.pngkey.com/detail/u2t4o0u2w7t4w7a9_cashless-society-bills-payment-icon/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FinTech </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL vs. NoSQL</title>
      <link href="2021/02/21/sql-nosql/"/>
      <url>2021/02/21/sql-nosql/</url>
      
        <content type="html"><![CDATA[<p><img src="https://qph.fs.quoracdn.net/main-qimg-548fdcb1dec7865303859def292f1f30"></p><blockquote><p>I came across this topic when evaluating data storage methods for a system design challenge. and realize it’s would be beneficial to learn the difference systematically. This is my learning notes based on “grokking system design”.</p></blockquote><h3 id="A-design-choice-example-what-to-use"><a href="#A-design-choice-example-what-to-use" class="headerlink" title="A design choice example - what to use?"></a>A design choice example - what to use?</h3><p>Take the URL shortening service as an example. This service will provide short aliases redirecting to long URLs.</p><p><strong>Nature of the data</strong>:</p><ol><li>Billions of records</li><li>Each object is small</li><li>No relationship between records except user-URL pairs</li><li>Read-heavy</li></ol><p><strong>Database Schema</strong>:<br>Two tables, one for URL mappings, one for user’s data who created the short link.</p><p>Now the question is, what database to use?</p><h3 id="What-is-SQL"><a href="#What-is-SQL" class="headerlink" title="What is SQL"></a>What is SQL</h3><ul><li>SQL uses a relational database, which is structured and has predefined schemas.</li><li>Each row contains all the information about one entity and each column contains all the separate data points</li><li>Popular choices: MySQL, Oracle, MS SQL Server, SQLite, Postgres, Maria DB</li></ul><h3 id="What-is-NoSQL"><a href="#What-is-NoSQL" class="headerlink" title="What is NoSQL"></a>What is NoSQL</h3><ul><li>Non-relational databases are unstructured, distributed, and have a dynamic schema like file folders that hold everything.</li><li>Common types of NoSQL:<ul><li><strong>Key-Value Stores</strong>: Data is stored in an array of key-value pairs. Common choices: Redis, Voldemort, and Dynamo.</li><li><strong>Document Databases</strong>: Data is stored in documents and these documents are grouped together in collections. Each document can have an entirely different structure. Common choices: CouchDB and MongoDB.</li><li><strong>Wide-Column Databases</strong>: Instead of ‘tables,’ in columnar databases we have column families, which are containers for rows. Unlike relational databases, we don’t need to know all the columns upfront and each row doesn’t have to have the same number of columns. Columnar databases are best suited for analyzing large datasets - big names include Cassandra and HBase.</li><li><strong>Graph Databases</strong>:  Data is saved in graph structures with nodes (entities), properties (information about the entities), and lines (connections between the entities). Examples of graph databases include Neo4J and InfiniteGraph.</li></ul></li></ul><h3 id="Main-differences"><a href="#Main-differences" class="headerlink" title="Main differences"></a>Main differences</h3><p><strong>Storage</strong>: SQL use tables. NoSQL databases have different data storage models.<br><strong>Schema</strong>: SQL uses a fixed schema. NoSQL uses a dynamic schema.<br><strong>Query</strong>: SQL database use SQL for defining and manipulating data. NoSQL databases use different syntax, which is sometimes called UnQL (Unstructured Query Language).<br><strong>Scalability</strong>: SQL databases are <em>vertically</em> scalable, mostly done by increasing the capacity of a server, which is expensive. NoSQL databases are <em>horizontally</em> scalable, meaning we can add more cheap commodity hardware easily in our NoSQL database infrastructure to handle a lot of traffic.<br><strong>Reliability</strong>: When it comes to data reliability and safe-guarantee of performing transactions, SQL databases are still the better bet. Most of the NoSQL solutions sacrifice reliability for performance and scalability.</p><h3 id="Which-one-to-use"><a href="#Which-one-to-use" class="headerlink" title="Which one to use"></a>Which one to use</h3><h4 id="Reasons-to-use-SQL-database"><a href="#Reasons-to-use-SQL-database" class="headerlink" title="Reasons to use SQL database"></a>Reasons to use SQL database</h4><ul><li>Need reliability and data consistency, like stock trading and banking. Can prescribe exactly how tractions interact with the database.</li><li>Need to handle relationships, like social media.</li><li>Data is structured and unchanging</li></ul><h4 id="Reasons-to-use-NoSQL-database"><a href="#Reasons-to-use-NoSQL-database" class="headerlink" title="Reasons to use NoSQL database"></a>Reasons to use NoSQL database</h4><ul><li>Handling a large number of read and write operations, since NoSQL can add nodes on the fly and handle rapid development</li><li>Storing large volumes of data that often have little to no structure</li><li>Making the most of cloud computing and storage.</li><li>Running data analytics, where we have to deal with an influx of massive amounts of data.</li></ul><h3 id="Revisit-the-example-which-one-to-use"><a href="#Revisit-the-example-which-one-to-use" class="headerlink" title="Revisit the example: which one to use"></a>Revisit the example: which one to use</h3><p>“Since we anticipate storing billions of rows, and we don’t need to use relationships between objects – a <strong>NoSQL key-value store</strong> like DynamoDB, Cassandra or Riak is a better choice. A NoSQL choice would also be easier to scale. Please see SQL vs NoSQL for more details.”</p><hr><p>Reference:</p><ol><li><a href="https://www.educative.io/courses/grokking-the-system-design-interview">https://www.educative.io/courses/grokking-the-system-design-interview</a></li><li><a href="https://www.quora.com/Why-and-when-should-I-use-NoSQL-instead-of-SQL">https://www.quora.com/Why-and-when-should-I-use-NoSQL-instead-of-SQL</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A beginner&#39;s learning notes to BERT</title>
      <link href="2021/02/10/bert/"/>
      <url>2021/02/10/bert/</url>
      
        <content type="html"><![CDATA[<p><img src="https://lh3.googleusercontent.com/AUXkjNExXiiNUUSj-YVfHPKWNWtaeKxCM_9OnnQ6X9yt1h6nkX7ptzlam8RbR7xVZ-YZwkLD0j7-X9aC58OQZf6OtrqVLPEOj23LBZb9dkH4pDKtxtNgzBOfDqqyLjNXWrEiAf2g=w2400"></p><blockquote><p>This is my learning notes from <a href="http://jalammar.github.io/illustrated-bert/">Jay Alammar</a>.</p></blockquote><h4 id="What-is-BERT"><a href="#What-is-BERT" class="headerlink" title="What is BERT"></a>What is BERT</h4><p>BERT stands for <strong>Bidirectional Encoder Representations from Transformers</strong>. It is designed to pre-train deep bidirectional representations from unlabeled text by jointly conditioning on <em>both left and right context</em>. As a result, the pre-trained BERT model can be fine-tuned with just one additional output layer to create state-of-the-art models for a wide range of NLP tasks. <a href="https://www.analyticsvidhya.com/blog/2019/09/demystifying-bert-groundbreaking-nlp-framework/">reference</a></p><p><img src="https://lh3.googleusercontent.com/QubuB58pCrch4dnntdaiUyU5jLCseXIxgTtPZL_I_2gPCrIzakmrX85M-x7LZG89By0n4sk5GRsXrMHQE25BhvFYxvWHkSkZrWGmgqV7RrR-HiPdp4VWPW8lmoAU-CcLjBvj9y44=w2400"></p><h4 id="Why-BERT’s-performance-is-great"><a href="#Why-BERT’s-performance-is-great" class="headerlink" title="Why BERT’s performance is great"></a>Why BERT’s performance is great</h4><ol><li>It is bidirectional</li><li>It combines Mask Language Model (MLM) and Next Sentence Prediction (NSP)</li><li>It performs great to understand context-heavy texts</li></ol><h4 id="Closer-look-at-model-architecture"><a href="#Closer-look-at-model-architecture" class="headerlink" title="Closer look at model architecture"></a>Closer look at model architecture</h4><p>BERT is basically a trained bidirectional Transformer Encoder stack.</p><p><img src="https://lh3.googleusercontent.com/rTJwhnEfOATJN3aEZ93ETMMMMhW70HjoqfYsNvptCtisYOyRxBqDGPHIyH-FUZkjqEdRqwfruxYVRTOyt0vHgnf2wopWISl01msMazrBTDlWBUZnzXJvvnrylB9mD_PYzMKFTK4J=w2400"></p><h4 id="So…-What-is-Transformer"><a href="#So…-What-is-Transformer" class="headerlink" title="So… What is Transformer?"></a>So… What is Transformer?</h4><p>Transformer is a model that use attention to boost the training. It consists an encoding component and a decoding component, and connections between them.<br><img src="https://lh3.googleusercontent.com/MEGLErxHWQKsdhSStaBePr0U_fjiWs6iF4dbkg37moSKYlRZQpp_j9qlwUNQ52hWFCBgjgSFNmSy4LqYhCrUuHtelRMPBztIWADpvb0gwowj7RQ6Na9tijV5p6mtPrulxmyehT1Z=w2400"></p><p>The encoder’s inputs first flow through a self-attention layer – a layer that helps the encoder look at other words in the input sentence as it encodes a specific word.<br><img src="https://lh3.googleusercontent.com/e9g4fIgOYZxLnmWFcIHnqaYqZ5SDjh7I-1w27JmUHNxtZ3WtcrTR_4pA8B6C2AYJLUVfmVKKlvCal5tbWD7xarN_pshtzV1GMWj32LpM8JJ9ssAxf5O8GYk4HXycEaDiL_qSjf4d=w2400"></p><p>This concept itself is interesting and complicated. More information can be found <a href="https://jalammar.github.io/illustrated-transformer/">here</a></p><h4 id="Several-Models-before-BERT"><a href="#Several-Models-before-BERT" class="headerlink" title="Several Models before BERT"></a>Several Models before BERT</h4><h5 id="Word-Embedding"><a href="#Word-Embedding" class="headerlink" title="Word Embedding"></a>Word Embedding</h5><ul><li>What is it: use a vector (a list of numbers) to properly represent words in a way that captures semantic or meaning-related relationships (e.g. the ability to tell if words are similar, or opposites, or that a pair of words like “Stockholm” and “Sweden” have the same relationship between them as “Cairo” and “Egypt” have between them) as well as syntactic, or grammar-based, relationships (e.g. the relationship between “had” and “has” is the same as that between “was” and “is”).</li><li>Available in pre-trained model like Word2Vec or GloVe</li><li>No context information</li></ul><h5 id="ELMo-Context-Matters"><a href="#ELMo-Context-Matters" class="headerlink" title="ELMo: Context Matters"></a>ELMo: Context Matters</h5><ul><li>Give embedding based on the context a word is used in</li><li>ELMo looks at the entire sentence before assigning each word in it an embedding. It uses a bi-directional LSTM trained on a specific task to be able to create those embeddings. ELMo gained its language understanding from being trained to predict the next word in a sequence of words - a task called <strong>Language Modeling</strong>.</li><li>Use as pre-trained model</li></ul><h5 id="OpenAI-Transformer-Pre-training-a-Transformer-Decoder-for-Language-Modeling"><a href="#OpenAI-Transformer-Pre-training-a-Transformer-Decoder-for-Language-Modeling" class="headerlink" title="OpenAI Transformer: Pre-training a Transformer Decoder for Language Modeling"></a>OpenAI Transformer: Pre-training a Transformer Decoder for Language Modeling</h5><ul><li>The decoder is a good choice because it’s a natural choice for language modeling (predicting the next word) since it’s built to mask future tokens – a valuable feature when it’s generating a translation word by word.</li><li>Predict the next word using massive (unlabeled) datasets.</li><li>The openAI transformer gave us a fine-tunable pre-trained model based on the Transformer</li></ul><h4 id="BERT-From-Decoders-to-Encoders"><a href="#BERT-From-Decoders-to-Encoders" class="headerlink" title="BERT: From Decoders to Encoders"></a>BERT: From Decoders to Encoders</h4><h5 id="BERT-training"><a href="#BERT-training" class="headerlink" title="BERT training"></a>BERT training</h5><p><img src="https://lh3.googleusercontent.com/AUXkjNExXiiNUUSj-YVfHPKWNWtaeKxCM_9OnnQ6X9yt1h6nkX7ptzlam8RbR7xVZ-YZwkLD0j7-X9aC58OQZf6OtrqVLPEOj23LBZb9dkH4pDKtxtNgzBOfDqqyLjNXWrEiAf2g=w2400"></p><ol><li>Some tokens from the input sequence are masked and the model learns to predict these words (Masked language model).</li><li>Two “sentences” are fed as input and the model is trained to predict if one sentence follows the other one or not (next sentence prediction NSP).</li><li>So we’ll feed BERT with two sentences masked, and we’ll obtain the prediction whether they’re subsequent or not, and the sentences without masked words</li></ol><h6 id="So-how-to-mask"><a href="#So-how-to-mask" class="headerlink" title="So.. how to mask?"></a>So.. how to mask?</h6><p>From each input sequence 15% of the tokens are processed as follows:</p><ul><li>with 0.8 probability the token is replaced by [MASK]</li><li>with 0.1 probability the token is replaced by another random token</li><li>with 0.1 probability the token is unchanged</li></ul><h6 id="Next-sentence-prediction"><a href="#Next-sentence-prediction" class="headerlink" title="Next sentence prediction"></a>Next sentence prediction</h6><p>These two sentences A and B are separated with the special token [SEP] and are formed in such a way that 50% of the time B is the actual next sentence and 50% of the time is a random sentence.</p><h6 id="BERT-input"><a href="#BERT-input" class="headerlink" title="BERT input"></a>BERT input</h6><p>The input sequence of BERT is composed by two sentences with a [SEP] token in between, and the initial “classification token” [CLS] that will later be used for prediction. Each token has a corresponding embedding, a segment embedding that identifies each sentence, and a position embedding to distinguish the position of each token (same as the positional encoding in the Transformer paper). All these embeddings are then summed up for each token.</p><p><img src="https://lh3.googleusercontent.com/1X9mDZDJ7qdkgU-Cid728zY48EfKDGTY--VhM47Z_BwjwJ0vOrxCCCMUazi_jsIWsqBWz--PhOB-bXDROw_ErBoYaucnTbvP9cvXgQgZfKvQQNDUcWjYZUZutxxVq0mxSz7K4NZW=w2400"></p><h6 id="BERT-Outputs"><a href="#BERT-Outputs" class="headerlink" title="BERT Outputs"></a>BERT Outputs</h6><p>Each position outputs a vector of size hidden_size (768 in BERT Base). For a sentence classification example , we focus on the output of only the first position (that we passed the special [CLS] token to).</p><p><img src="https://lh3.googleusercontent.com/F85R__AcheDjatnQnIg49Xa-S0LukksGKAuYtNlwMkQxzF6IvC_b7tAR-qyMPqkbYy9VjmdMNrt4U5Jb9Q0sfHpnb4Fx1SVFsqV2GrLEqmfVoGKfROVs0vJX6eZffZCFZbuC4o6g=w2400"></p><h5 id="Use-pre-trained-fine-tuned-models-for-specific-tasks"><a href="#Use-pre-trained-fine-tuned-models-for-specific-tasks" class="headerlink" title="Use pre-trained fine-tuned models for specific tasks"></a>Use pre-trained fine-tuned models for specific tasks</h5><p>BERT is a language model that can be used directly to approach other NLP tasks (summarization, question answering, etc.).<br><img src="https://lh3.googleusercontent.com/GLE92oyVawYaY3JCj-S3blEFf-9Z4h8Y7VzHnrgfG-_v3_SFRbb86ylz_ceebtaLemp189ItfML0rpC9153J-l00WsBJG0uxJf-QO9QE6F-CUhrl0TScF_VCjVLOUSF9QsloBDEY=w2400"></p><h5 id="Use-BERT-for-feature-extraction"><a href="#Use-BERT-for-feature-extraction" class="headerlink" title="Use BERT for feature extraction"></a>Use BERT for feature extraction</h5><p><img src="https://lh3.googleusercontent.com/BBh5hlS2yOsHfnTGXlh54Dm3ZHzvN97kuwhOVzw9ytuUcPEDowiIADh_YWcGgYf2L2-NvD5f0j7IsogIVYzM-YPP7RlkyaUr_ccCRwSSGEg2P6G47tpxlAbtnNqJBb-Xp4XlvdJc=w2400"></p><h4 id="Next-step"><a href="#Next-step" class="headerlink" title="Next step"></a>Next step</h4><p>Give BERT a try! I plan to take notes on this topic in my next post based on this <a href="http://jalammar.github.io/a-visual-guide-to-using-bert-for-the-first-time/">post</a></p><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><ol><li><a href="http://jalammar.github.io/illustrated-bert/">http://jalammar.github.io/illustrated-bert/</a></li><li><a href="https://www.analyticsvidhya.com/blog/2019/09/demystifying-bert-groundbreaking-nlp-framework/">https://www.analyticsvidhya.com/blog/2019/09/demystifying-bert-groundbreaking-nlp-framework/</a></li><li><a href="https://medium.com/dair-ai/a-light-introduction-to-bert-2da54f96b68c">https://medium.com/dair-ai/a-light-introduction-to-bert-2da54f96b68c</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nlp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Use Custom Domain to Personal Blog with Hexo</title>
      <link href="2021/01/29/domain/"/>
      <url>2021/01/29/domain/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Today I migrated my personal blog from the default *.github.io to a custom domain. The process is not as smooth as I expected, so here I write down what I did right and wrong.</p></blockquote><h3 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite"></a>Prerequisite</h3><p>A personal using Hexo is already set up and being successfully deployed on <code>*.github.io</code></p><h3 id="Buy-a-domain"><a href="#Buy-a-domain" class="headerlink" title="Buy a domain"></a>Buy a domain</h3><p>I researched <a href="https://domains.google/">Google Domains</a> and <a href="https://www.godaddy.com/">GoDaddy</a>. GoDaddy offers a lower first-year price, but for the following year it is getting pricy, while Google Domain offers a flat annual price. I bought with Google since I plan to keep my domain for a long time.</p><p><img src="https://lh3.googleusercontent.com/7TZTaNXViUuGhYDGrhk5HjZW_siiiVpZ8BsSDXRx5C9Chbjl2D4lpGA5ROY1cskzPl4ncKUZAI93AXLg9wOG4U3GqRDRWjqQZluZ60OShzjnEqFxp-jUbs4stMaWKHSeij97XCpnPQ=w2400" alt="GoDaddy"><br><img src="https://lh3.googleusercontent.com/rSjEH3Grh0z5ZhRPyAvI_FPKD9SGqOJMlcxoB50CN-ft-ZoiMPO4ItXnOJirsVAF6wBVmA35BKHg09EP1x5S3x8J9VQOyPHKKeu32NUlOGlgmGkGghWu3Z4XSZ0GvQNnJ8YSatMbvg=w2400" alt="Google Domains"></p><h3 id="Deploy-to-custom-domain-on-GitHub-repo"><a href="#Deploy-to-custom-domain-on-GitHub-repo" class="headerlink" title="Deploy to custom domain (on GitHub repo)"></a>Deploy to custom domain (on GitHub repo)</h3><ol><li><p>Modify _config.yml file; change url to the new domain</p></li><li><p>Add CNAME file in source directory</p><ul><li><strong>Caveat</strong>: Github tutorial will ask you to first create a CNAME file under root directory, and that pull the commit to your local repo. However, doing this will cause you to lose the CNAME file in your next Hexo deployment because Hexo will DELETE the CNAME file. A workaround is to put the CNAME file in the <code>source</code> directory.</li></ul></li></ol><h3 id="Add-subdomain-on-hosting-provider"><a href="#Add-subdomain-on-hosting-provider" class="headerlink" title="Add subdomain (on hosting provider)"></a>Add subdomain (on hosting provider)</h3><ol><li><p>Get your git pages’IP</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ping xxx<span class="selector-class">.github</span>.io</span><br><span class="line"><span class="comment">// change xxx to your own</span></span><br></pre></td></tr></table></figure><p>The return XXX.XXX.XXX.XXX is the ip you need.</p></li><li><p>Configurate DNS seeting in your domain host</p></li></ol><p><img src="https://lh3.googleusercontent.com/8eeHyv-RPn_Ba8gyJz51al3fgDnSSID4JJVpGA6o68zL3hiaBh0nupVtmIoblrC25LwQGOx4Uxd_3X4yejMjVnmdlD1AsU41g3AehR-l81T5lWLg3o1AGiXdAxGg9y7J5YddG0oylQ=w2400"></p><blockquote><p>Note: some tutorial will ask you to create a CNAME record instead. The main difference between the A record and CNAME record is that the A record maps a name to one or more <em>IP addresses</em> when IP are known and stable, while the CNAME record maps a name too another name. It should only be used when there are no other records on that name.</p></blockquote><h3 id="Redeploy"><a href="#Redeploy" class="headerlink" title="Redeploy"></a>Redeploy</h3><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean <span class="variable">&amp;&amp;</span> hexo g <span class="variable">&amp;&amp;</span> hexo d</span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ol><li><a href="https://alexzl5.github.io/use-custom-domain-with-hexo/">https://alexzl5.github.io/use-custom-domain-with-hexo/</a></li><li><a href="https://xiaoyuliu.github.io/2018/03/28/how-to-sync-hexo-blog/">https://xiaoyuliu.github.io/2018/03/28/how-to-sync-hexo-blog/</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GIT Commands and Scenarios</title>
      <link href="2021/01/24/git/"/>
      <url>2021/01/24/git/</url>
      
        <content type="html"><![CDATA[<p><img src="https://lh3.googleusercontent.com/bxBJ4m18nzrt2Nw5IOzc26fR44ej8NETXF2vR-AiiGorsbe_iWR2luZrE-TwA2vJLcnmIKS7ql52K7sNztBK0sN3FXljYoQ78ajx71YDZdNMaeQPMkYVbB0f9pl9blqgvZBdWafyfw=w2400"></p><h3 id="Git-with-local-repos"><a href="#Git-with-local-repos" class="headerlink" title="Git with local repos"></a>Git with local repos</h3><ul><li><code>git add</code>: Git to track our file</li><li><code>git diff &lt;filename&gt;</code>: show only the unstaged changes by default. If wish to show the difference between staged and µcommitted, used <code>--stage</code>.</li><li><code>git commit -a -m &lt;your msg&gt;</code>: skipping staging and go directly to commit, but this does not work on new files because they are untracked. <code>-a</code> means to add all <strong>known files</strong>.</li><li><code>git log --all --oneline --decorate --graph</code> shows the log</li><li><code>git show &lt;commit id&gt;</code> show details of a specific commit</li><li><code>git add -p</code> p for patch. Interactively choose hunks of patch between the index and the work tree and add them to the index. This gives the user a chance to review the difference before adding modified contents to the index.</li><li><code>git rm &lt;filename&gt;</code> stops a file being tracked <strong>and</strong> removing from the directory. changes are staged to be committed.</li><li><code>git reset HEAD &lt;filename&gt;</code> unstages added changes</li><li><code>git mv &lt;filename1&gt;  &lt;filename2&gt; </code> to rename file in the repo. This will also change the working directory.</li><li><code>git merge --abort</code> discard merge</li><li><code>git rebase &lt;branch name&gt;</code>: move the current branch on top of the <branch name>. This will help keep the history linear</li></ul><h3 id="Git-remote-command"><a href="#Git-remote-command" class="headerlink" title="Git remote command"></a>Git remote command</h3><ul><li><code>git remote</code>: list remote repositories</li><li><code>git remote update</code>: git remote update can update all of your branches set to track remote ones, however not merge any changes in</li><li><code>git fetch</code>:  git fetch can update only the branch you are on, however not merge any changes in</li><li><code>git pull</code>: can update and merge any remote changes of the present branch you are on</li><li><code>git branch -r</code>: List remote branches</li></ul><h3 id="How-to-undo-changes"><a href="#How-to-undo-changes" class="headerlink" title="How to undo changes"></a>How to undo changes</h3><h4 id="reset-vs-checkout"><a href="#reset-vs-checkout" class="headerlink" title="reset vs checkout"></a><code>reset</code> vs <code>checkout</code></h4><ul><li><code>reset</code> resets the index without touching the working tree</li><li><code>checkout</code> changes the working tree without touching the index.</li></ul><h4 id="Several-usage-scenarios"><a href="#Several-usage-scenarios" class="headerlink" title="Several usage scenarios"></a>Several usage scenarios</h4><h5 id="git-checkout-lt-filename-gt"><a href="#git-checkout-lt-filename-gt" class="headerlink" title="git checkout &lt;filename&gt;"></a><code>git checkout &lt;filename&gt;</code></h5><ul><li><input disabled="" type="checkbox"> When to use: stage –&gt; Working</li><li><input disabled="" type="checkbox"> Will change working directory: yes</li><li><input disabled="" type="checkbox"> How it works: checkout a file from repo so that the last changes are discarded<br>This will revert changes to modified files before they are staged.</li></ul><h5 id="git-checkout-head-lt-filename-gt"><a href="#git-checkout-head-lt-filename-gt" class="headerlink" title="git checkout head &lt;filename&gt;"></a><code>git checkout head &lt;filename&gt;</code></h5><ul><li><input disabled="" type="checkbox"> When to use: stage –&gt; stage</li><li><input disabled="" type="checkbox"> Will change working directory: Yes</li><li><input disabled="" type="checkbox"> How it works: checkout a file from repo so that the last changes are discarded<br>This will revert changes to modified files before they are staged.</li></ul><h5 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a><code>git reset</code></h5><ul><li><input disabled="" type="checkbox"> When to use: repo –&gt; stage</li><li><input disabled="" type="checkbox"> Will change working directory: No</li><li><input disabled="" type="checkbox"> How it works: unstage changes, reset commit</li></ul><h5 id="git-reset-–-hard-origin-master"><a href="#git-reset-–-hard-origin-master" class="headerlink" title="git reset –-hard origin/master"></a><code>git reset –-hard origin/master</code></h5><ul><li><input disabled="" type="checkbox"> When to use: remote repo –&gt; local repo –&gt; working</li><li><input disabled="" type="checkbox"> Will change working directory: Yes</li><li><input disabled="" type="checkbox"> How it works: after committing to remote repo</li></ul><h3 id="How-to-modify-a-previous-commit"><a href="#How-to-modify-a-previous-commit" class="headerlink" title="How to modify a previous commit"></a>How to modify a previous commit</h3><h4 id="Fix-a-fixable-commit"><a href="#Fix-a-fixable-commit" class="headerlink" title="Fix a (fixable) commit"></a>Fix a (fixable) commit</h4><p><strong>Scenario</strong>: The previous commit misses either some file or the msg is not correct</p><p><strong>Solution</strong>: use <code>--amend</code> along with <strong>staged</strong> changes to modify the previous commit</p><p><strong>What it actually does</strong>: overwrite the previous commit</p><p><strong>Heads up</strong>: avoid using it on public repos</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"> a.py</span></span><br><span class="line">git commit -m <span class="string">&#x27;added two files&#x27;</span> <span class="comment"># wrong commit</span></span><br><span class="line">git <span class="keyword">add</span><span class="bash"> b.py</span></span><br><span class="line">git commit --amend <span class="comment"># this will also open an editor to modify the previous commit msg.</span></span><br></pre></td></tr></table></figure><h4 id="revert-a-bad-commit"><a href="#revert-a-bad-commit" class="headerlink" title="revert a (bad) commit"></a>revert a (bad) commit</h4><p><strong>Scenario</strong>: roll back a bad commit</p><p><strong>Solution</strong>: revert the commit</p><p><strong>What it actually does</strong>: creates an inverse of the previous commit  </p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">revert</span> HEAD # <span class="built_in">revert</span> the previous head</span><br><span class="line">git <span class="built_in">revert</span> &lt;commit ID&gt; # <span class="built_in">revert</span> another commit back <span class="built_in">in</span> <span class="built_in">time</span></span><br></pre></td></tr></table></figure><h3 id="How-to-squash-commits-when-doing-pull-request"><a href="#How-to-squash-commits-when-doing-pull-request" class="headerlink" title="How to squash commits when doing pull request"></a>How to squash commits when doing pull request</h3><p>Use this when forking and doing pull requests back to the master.</p><ol><li><p>rebase to master. We can use rebase since typically only one person uses the forked repo</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i <span class="keyword">master</span> <span class="title"># I</span> for interactive</span><br></pre></td></tr></table></figure></li><li><p>squash commits</p><ul><li>make the first commit<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b new_branch</span><br><span class="line">edit</span><br><span class="line">git <span class="builtin-name">add</span> .</span><br><span class="line">git commit -m <span class="string">&#x27;first commit&#x27;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li><li>make the second commit<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">edit</span><br><span class="line">git <span class="keyword">add</span> .</span><br><span class="line">git <span class="keyword">commit</span> -m <span class="string">&#x27;second commit&#x27;</span></span><br><span class="line">git push  # now new_branch <span class="keyword">is</span> ahead <span class="keyword">of</span> master <span class="keyword">by</span> two <span class="keyword">commit</span></span><br></pre></td></tr></table></figure></li><li>rebase and squash. If you mark one or more lines as “squash”, they will be combined with the one above<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i <span class="keyword">master</span> <span class="title">#interactively</span> squash commits</span><br><span class="line">git show <span class="comment"># show the latest commit</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="Miscellaneous"><a href="#Miscellaneous" class="headerlink" title="Miscellaneous"></a>Miscellaneous</h3><h4 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="cherry-pick"></a>cherry-pick</h4><ul><li><input disabled="" type="checkbox"> use when selecting commits from other branches into main branch</li><li><input disabled="" type="checkbox"> <code>git cherry-pick &lt;commitID1&gt; &lt;commitID2&gt;</code></li></ul><h4 id="modify-old-commits"><a href="#modify-old-commits" class="headerlink" title="modify old commits"></a>modify old commits</h4><ul><li><input disabled="" type="checkbox"> use <code>git rebase -i</code> to reorder the commit I want to change to be on top</li><li><input disabled="" type="checkbox"> use <code>git commit --amend</code> to modify the commit</li><li><input disabled="" type="checkbox"> use <code>git rebase -i</code> again to change the order back</li></ul><h4 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h4><ul><li><input disabled="" type="checkbox"> use when I want some anchor more permanent than a branch or commit</li><li><input disabled="" type="checkbox"> <code>git tag &lt;versionid&gt; &lt;commitID&gt;</code></li><li><input disabled="" type="checkbox"> use <code>git describe &lt;a reference&gt;</code> to describe where you are relative to the closest “anchor”. The reference could be a branch<h4 id="relative-referencing"><a href="#relative-referencing" class="headerlink" title="relative referencing"></a>relative referencing</h4></li><li>Moving upwards one commit at a time with <code>^</code><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">git</span> <span class="string">checkout main^</span></span><br><span class="line"><span class="attr">git</span> <span class="string">checkout main^^</span></span><br></pre></td></tr></table></figure></li><li>Moving upwards a number of times with <code>~&lt;num&gt;</code><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -f main HEAD~<span class="number">3</span> # reset main <span class="number">3</span> commits upwards</span><br></pre></td></tr></table></figure><img width="920" alt="Screen Shot 2021-01-07 at 5 49 42 PM" src="https://user-images.githubusercontent.com/5552371/103957620-bbfa4600-5110-11eb-9b55-c85751756ecd.png"></li></ul><p>Reference:</p><ol><li><a href="https://bugfender.com/blog/robust-development-with-git-flow-bitbucket-pipelines-and-bitrise/">https://bugfender.com/blog/robust-development-with-git-flow-bitbucket-pipelines-and-bitrise/</a></li><li><a href="https://www.coursera.org/learn/introduction-git-github">https://www.coursera.org/learn/introduction-git-github</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CI/CD Pipeline with DevOps</title>
      <link href="2021/01/13/devops/"/>
      <url>2021/01/13/devops/</url>
      
        <content type="html"><![CDATA[<p><img src="https://lh3.googleusercontent.com/Jg8TCymBhTxoUzGI9cDTLmcyGEarTCeYUwYw9lM3GI-sAGopEc1yw9gh5d2tPkUeQZkBLHTZFDL_1wTQeCGJDl3eNl8wDDHaapUX2nnEaCz1NeRXcg8HAnvFDLkirVvWnAY6OygIMA=w2400"></p><h3 id="Concepts-explanation"><a href="#Concepts-explanation" class="headerlink" title="Concepts explanation"></a>Concepts explanation</h3><h4 id="Continuous-Integration-CI"><a href="#Continuous-Integration-CI" class="headerlink" title="Continuous Integration (CI)"></a>Continuous Integration (CI)</h4><p>Merge multiple contributions into the same branch, and build, test and package together. Save the results in the artifact repository.</p><h4 id="Continuous-Delivery-CD"><a href="#Continuous-Delivery-CD" class="headerlink" title="Continuous Delivery (CD)"></a>Continuous Delivery (CD)</h4><p>Automatically deploy new version from artifact repository to test environment</p><h4 id="Continuous-deployment-CD"><a href="#Continuous-deployment-CD" class="headerlink" title="Continuous deployment (CD)"></a>Continuous deployment (CD)</h4><p>Automatically deploys a past stable version to production</p><h4 id="Artifact-Repository"><a href="#Artifact-Repository" class="headerlink" title="Artifact Repository"></a>Artifact Repository</h4><p>Artifact repositories are designed to store all kinds of files, including binary ones. This includes anything from zipped up source codes, to build results, to things like docker images as well. It can be used to host and share packages.<br>On the contrast, a common source control systems are usually designed to handle text based files, and not binary files.</p><h4 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h4><p>DevOps is a software development method which focuses on communication, integration, and collaboration to enables rapid deployment of products.<br>DevOps is a culture that promotes collaboration between Development and Operations Team. This allows deploying code to production faster and in an automated way.</p><h4 id="Deployment-Stages"><a href="#Deployment-Stages" class="headerlink" title="Deployment Stages"></a>Deployment Stages</h4><ul><li><p>Dev: Working code copy. Changes made by developers are deployed here so integration and features can be tested. This environment is rapidly updated and contains the most recent version of the application.</p></li><li><p>QA: (Not all companies will have this). Environment for quality assurance; this provides a less frequently changed version of the application which testers can perform checks against. This allows reporting on a common revision so developers know whether particular issues found by testers has already been corrected in the development code.</p></li><li><p>Staging: This is the release candidate, and this environment is normally a mirror of the production environment. The staging area contains the “next” version of the application and is used for final stress testing and client/manager approvals before going live.</p></li><li><p>Production: This is the currently released version of the application, accessible to the client/end users. This version preferably does not change except for during scheduled releases.</p></li></ul><p><img src="https://lh3.googleusercontent.com/4Qa-2KKVghhDnVGpYVqPOEu8iNW21U_KjLaA0vjf5hUnnx1FohTP2dGuD2fYez5t1NfsBzdjOCIGhMfoKvrD6i8EM9cxdpO1HfSxX-CL8Fi43aMgg4B_L28WGDrxXVVB3YrqBMTFew=w2400"></p><h4 id="Agile-Vs-DevOps-What’s-the-difference"><a href="#Agile-Vs-DevOps-What’s-the-difference" class="headerlink" title="Agile Vs. DevOps: What’s the difference?"></a>Agile Vs. DevOps: What’s the difference?</h4><ul><li>Agile addresses gaps in Customer and Developer communications</li><li>DevOps addresses gaps in Developer and IT Operations communications</li></ul><p><img src="https://lh3.googleusercontent.com/I4zhpi8PHMKfJLPI6AaAQ-JHImlknTyv7-A8C4s1DIUe3GM2NjDd5zx6xypsCGYMJ0ETcYgs5EaIX4sRiKAts4JYnl5FniI0Px6vrZIR7iB8IzNq5JY1c51Us8dRuG_AlvasaRj2=w2400"></p><hr><h3 id="A-real-world-example"><a href="#A-real-world-example" class="headerlink" title="A real world example"></a>A real world example</h3><p>Use a workflow for a CI/CD pipeline using Microsoft tools. Here I will just cite this <a href="https://stackify.com/what-is-cicd-whats-important-and-how-to-get-it-right/">workflow</a>.</p><ul><li><p>An engineer codes application changes using Visual Studio.</p></li><li><p>When the code is ready for integration, it’s pushed to a Git repository in Azure Repos.</p></li><li><p>CI automatically triggers the execution of test cases that will confirm that the code is available for release.</p></li><li><p>In Azure Pipelines, the release pipeline triggers automatically to deploy the artifacts produced in the CI stage.</p></li><li><p>An artifact is released into the Azure Web App—let’s say to a development environment.</p></li><li><p>Application Insights collects information from the site to provide feedback to the team.</p></li><li><p>The team uses the information available after a release to know the status and impact of the latest version.</p></li><li><p>Any new feature or bug fix is added and prioritized into the backlog.</p><p><img src="https://lh3.googleusercontent.com/uk7vVFJWGsvByS9gskItu7CW3GxSuX4HLmwjGrOlkCF69nVO2OBJWxaTrdD41kKsqNe840n8LzWMwyjiKnDSzmIU6MhLPJfbQ3z8AQiDcINTjRj5QooJgNzzYT8ggQsERlVtKWLo=w2400"></p></li></ul><h3 id="How-to-apply-CI-CD-principles-to-machine-Learning"><a href="#How-to-apply-CI-CD-principles-to-machine-Learning" class="headerlink" title="How to apply CI/CD principles to machine Learning"></a>How to apply CI/CD principles to machine Learning</h3><p>Here is an <a href="https://towardsdatascience.com/ci-cd-pipeline-with-azure-devops-for-data-science-project-f263586c266e">example</a> that I find really detailed and inspiring.</p><hr><p>Reference:</p><p><a href="https://www.mindtheproduct.com/what-the-hell-are-ci-cd-and-devops-a-cheatsheet-for-the-rest-of-us/">https://www.mindtheproduct.com/what-the-hell-are-ci-cd-and-devops-a-cheatsheet-for-the-rest-of-us/</a></p><p><a href="https://stackify.com/what-is-cicd-whats-important-and-how-to-get-it-right/">https://stackify.com/what-is-cicd-whats-important-and-how-to-get-it-right/</a></p><p><a href="https://devops.stackexchange.com/questions/452/what-is-an-artifact-repository">https://devops.stackexchange.com/questions/452/what-is-an-artifact-repository</a></p><p><a href="https://azure.microsoft.com/en-us/overview/what-is-devops/">https://azure.microsoft.com/en-us/overview/what-is-devops/</a></p><p><a href="https://www.guru99.com/agile-vs-devops.html">https://www.guru99.com/agile-vs-devops.html</a></p><p><a href="https://azuredevopslabs.com/labs/vstsextend/aml/">https://azuredevopslabs.com/labs/vstsextend/aml/</a></p><p><a href="https://builttoadapt.io/devops-is-not-a-role-63fb8d62b0f6">https://builttoadapt.io/devops-is-not-a-role-63fb8d62b0f6</a></p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DevOps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Database vs. Data warehouse vs. Data lake</title>
      <link href="2020/12/13/data-storage/"/>
      <url>2020/12/13/data-storage/</url>
      
        <content type="html"><![CDATA[<p><img src="https://lh3.googleusercontent.com/QCl3KhnRgK-752OM8-l8cdDOoXK1z7op7_A3zR6PFF0udyJqtlk2-eqzJjgIm8eFHn6U1MJ_y61JaNXiJn5NR94L2FDQ2n_pGCgPEc9ISqJgEaSQIpuKTkpgl0tjN7R2vD9PBig7rw=w2400"></p><h3 id="What-is-database"><a href="#What-is-database" class="headerlink" title="What is database"></a>What is database</h3><p>A database is a storage location that houses <code>structured data</code>.</p><p>Mostly used for transaction, and has good performance for <code>both reading and writing</code>, but just for <code>a small amount of data</code>.</p><p>Popular databases are:</p><ul><li>Oracle</li><li>PostgreSQL</li><li>MongoDB</li><li>Redis</li><li>Elasticsearch</li><li>Apache Cassandra</li></ul><p>Learn more about the key difference in databases: SQL vs NoSQL (coming later).</p><h3 id="What-is-data-warehouse-DWH"><a href="#What-is-data-warehouse-DWH" class="headerlink" title="What is data warehouse (DWH)"></a>What is data warehouse (DWH)</h3><p>Data warehouses are large storage locations for data that you accumulate from a wide range of sources. More specifically, the process of creating a DWH can be seen as moving raw data input via Extract-Transform-Load (ETL) actions into a consolidated storage system to be used for analysis.</p><p>Mostly used for data analysis, and only has good performance for <code>reading</code>, but good for <code>large amount of data</code>. Use <code>denormalization</code> and thus having redundant data for speed purpose.</p><p>It also uses multiple instance for query, distributed based on primary key.</p><p>Popular data warehouse are:</p><ul><li>Snowflake</li><li>Yellowbrick</li><li>Teradata</li><li>Amazon RedShift</li></ul><h3 id="What-is-data-lake"><a href="#What-is-data-lake" class="headerlink" title="What is data lake"></a>What is data lake</h3><p>A data lake is a large storage repository that holds a huge amount of raw data in its original format until you need it.<br>The use cases for data lakes are generally limited to data science research and testing—so the primary users of data lakes are data scientists and engineers. For a company that actually builds data warehouses, for instance, the data lake is a place to dump and temporarily store all the data until the data warehouse is up and running.</p><p>This is essentially a “do-it-yourself” version fo a data warehouse.</p><p><img src="https://miro.medium.com/max/1400/0*rm-pmzJWUMzBarKf" alt="Data lakes are often built with a combination of open source and closed source technologies, making them easy to customize and able to handle increasingly complex workflows. Image courtesy of Lior Gavish/Monte Carlo."></p><p>Reference:<br><a href="https://www.datamation.com/big-data/top-data-warehouse-tools.html">https://www.datamation.com/big-data/top-data-warehouse-tools.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Conda vs. Homebrew vs. pip</title>
      <link href="2020/12/12/conda-brew-pip/"/>
      <url>2020/12/12/conda-brew-pip/</url>
      
        <content type="html"><![CDATA[<h3 id="what-is-pip"><a href="#what-is-pip" class="headerlink" title="what is pip"></a>what is pip</h3><p>pip is a package-management system written in Python used to install and manage software packages. It connects to an online repository of public and paid-for private packages, called the Python Package Index. Most distributions of Python come with pip preinstalled.</p><p> Pip is the Python Packaging Authority’s recommended tool for installing packages from the Python Package Index, PyPI.</p><p> Pip installs Python software packaged as wheels or source distributions. The latter may require that the system have compatible compilers, and possibly libraries, installed before invoking pip to succeed.</p><h3 id="what-is-conda"><a href="#what-is-conda" class="headerlink" title="what is conda"></a>what is conda</h3><p>Conda is an open-source, cross-platform, language-agnostic package manager and environment management system.</p><p>It installs and manages conda packages from the Anaconda repository as well as from the Anaconda Cloud. Conda packages are binaries. There is never a need to have compilers available to install them. Conda packages are not limited to Python software.</p><h3 id="what-is-brew"><a href="#what-is-brew" class="headerlink" title="what is brew"></a>what is brew</h3><p>Homebrew is a free and open-source software package management system that simplifies the installation of software on Apple’s macOS operating system and Linux.</p><h3 id="when-to-use-Homebrew-vs-pip"><a href="#when-to-use-Homebrew-vs-pip" class="headerlink" title="when to use Homebrew vs pip"></a>when to use Homebrew vs pip</h3><p>Homebrew is for installing general (usually command-line) software packages for OS X, such as the latest version of Python.</p><p>Use pip to install the Python packages that you need.</p><p>“Homebrew is like the aptitude (apt-get) for Ubuntu”</p><h3 id="difference-between-conda-and-pip"><a href="#difference-between-conda-and-pip" class="headerlink" title="difference between conda and pip"></a>difference between conda and pip</h3><ol><li>Pip requires python to be installed first.</li><li>Pip needs venv to create environment.</li><li>How dependency relationships within an environment are fulfilled. When installing packages, pip installs dependencies in a recursive, serial loop. In contrast, conda uses a satisfiability (SAT) solver to verify that all requirements of all packages installed in an environment are met.</li><li>Over 1,500 packages are available in the Anaconda repository. Over 150,000 packages available on PyPI.</li></ol><table><thead><tr><th></th><th>conda</th><th>pip</th></tr></thead><tbody><tr><td>manages</td><td>binaries</td><td>wheel or source</td></tr><tr><td>can require compilers</td><td>no</td><td>yes</td></tr><tr><td>package types</td><td>any</td><td>Python-only</td></tr><tr><td>create environment</td><td>yes, built-in</td><td>no, requires virtualenv or venv</td></tr><tr><td>dependency checks</td><td>yes</td><td>no</td></tr><tr><td>package sources</td><td>Anaconda repo and cloud</td><td>PyPI</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deploy Dash App on Heroku</title>
      <link href="2020/12/10/Deploy-Dash-App-on-Heroku/"/>
      <url>2020/12/10/Deploy-Dash-App-on-Heroku/</url>
      
        <content type="html"><![CDATA[<p><img src="https://lh3.googleusercontent.com/m3V7KePei7QDMcSLI0mOzl29nEce9fbJIiX5QzXCMDks734GlOhXHMJ3DjxnXQsL2vXurkSt4V81cGU1DaK3viKXdtyeRVRp-5eMSplLJsxht-oQUlA_r7uCT7Xqp88oqo9V8iyE_g=w2400"></p><h3 id="Goal-of-this-tutorial"><a href="#Goal-of-this-tutorial" class="headerlink" title="Goal of this tutorial"></a>Goal of this tutorial</h3><p>Guild through how to deploy a dash app on Heroku.</p><p>Here is the final output, and of course, you can give your app a different name!</p><p><a href="https://my-first-dash-app-brook-random.herokuapp.com/">https://my-first-dash-app-brook-random.herokuapp.com/</a></p><h3 id="What’s-Dash"><a href="#What’s-Dash" class="headerlink" title="What’s Dash?"></a>What’s Dash?</h3><p>Dash is a Python framework for building web analytic applications.</p><p>Written on top of Flask, Plotly.js, and React.js, Dash is ideal for building data visualization apps with highly custom user interfaces in pure Python. It’s particularly suited for anyone who works with data in Python.</p><h3 id="What’s-Heroku"><a href="#What’s-Heroku" class="headerlink" title="What’s Heroku?"></a>What’s Heroku?</h3><p>Heroku is a platform as a service (PaaS) that enables developers to build, run, and operate applications entirely in the cloud.</p><p>Heroku is one of the easiest platforms for deploying and managing public Flask applications.</p><h3 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite:"></a>Prerequisite:</h3><p>Heroko account and install Heroku CLI (<a href="https://www.heroku.com/">https://www.heroku.com/</a>)</p><h3 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h3><ol><li><p>Create a folder and initiate git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir your_dash_app_folder</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> your_dash_app_folder</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> git init</span></span><br></pre></td></tr></table></figure></li><li><p>Create a virtual environment. This will be the environment on which app will run.</p><p>With python 3:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>python3 -m venv your_venv_name</span><br></pre></td></tr></table></figure><p>With python 2<br>first install virtualenv</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>virtualenv your_venv_name</span><br></pre></td></tr></table></figure></li><li><p>Activate virtual environment</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source your_venv_name<span class="regexp">/bin/</span>activate <span class="comment"># uses the virtualenv</span></span><br></pre></td></tr></table></figure></li><li><p>Install dash, plotly and gunicorn, and any other packages required to run your app.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pip install plotly</span><br><span class="line">$ pip install dash</span><br><span class="line">$ pip install gunicorn # a Python Web<span class="built_in"> Server </span>Gateway<span class="built_in"> Interface </span>HTTP<span class="built_in"> server </span> </span><br></pre></td></tr></table></figure></li><li><p>Add app.py file. An example would be</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> dash</span><br><span class="line"><span class="keyword">import</span> dash_core_components <span class="keyword">as</span> dcc</span><br><span class="line"><span class="keyword">import</span> dash_html_components <span class="keyword">as</span> html</span><br><span class="line"></span><br><span class="line">external_stylesheets = [<span class="string">&#x27;https://codepen.io/chriddyp/pen/bWLwgP.css&#x27;</span>]</span><br><span class="line"></span><br><span class="line">app = dash.Dash(__name__, external_stylesheets=external_stylesheets)</span><br><span class="line"></span><br><span class="line">server = app.server</span><br><span class="line"></span><br><span class="line">app.layout = html.Div([</span><br><span class="line">    html.H2(<span class="string">&#x27;Hello World&#x27;</span>),</span><br><span class="line">    dcc.Dropdown(</span><br><span class="line">        id=<span class="string">&#x27;dropdown&#x27;</span>,</span><br><span class="line">        options=[&#123;<span class="string">&#x27;label&#x27;</span>: i, <span class="string">&#x27;value&#x27;</span>: i&#125; <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="string">&#x27;LA&#x27;</span>, <span class="string">&#x27;NYC&#x27;</span>, <span class="string">&#x27;MTL&#x27;</span>]],</span><br><span class="line">        value=<span class="string">&#x27;LA&#x27;</span></span><br><span class="line">    ),</span><br><span class="line">    html.Div(id=<span class="string">&#x27;display-value&#x27;</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.callback(dash.dependencies.Output(&#x27;display-value&#x27;, &#x27;children&#x27;),</span></span><br><span class="line">              [dash.dependencies.Input(<span class="string">&#x27;dropdown&#x27;</span>, <span class="string">&#x27;value&#x27;</span>)])</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">display_value</span>(<span class="params">value</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;You have selected &quot;&#123;&#125;&quot;&#x27;</span>.format(value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run_server(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li></ol><ol start="6"><li>Add .gitignore file<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">venv</span></span><br><span class="line">*<span class="selector-class">.pyc</span></span><br><span class="line"><span class="selector-class">.DS_Store</span></span><br><span class="line"><span class="selector-class">.env</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>Add procfile<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">web:</span> gunicorn <span class="attr">app:</span>server</span><br></pre></td></tr></table></figure>(Note that app refers to the filename app.py. server refers to the variable server inside that file).</li></ol><ol start="8"><li><p>Run locally  </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">python</span> app.<span class="keyword">py</span></span><br></pre></td></tr></table></figure></li><li><p>Add requirements.txt</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip <span class="keyword">freeze</span> &gt; requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>Init and deploy by heroku<br>As for now Heroku allows one “dyno” and five free apps to run.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>heroku create my-dash-app <span class="comment"># change my-dash-app to a unique name</span></span><br><span class="line"><span class="variable">$ </span>git add . <span class="comment"># add all files to git</span></span><br><span class="line"><span class="variable">$ </span>git commit -m <span class="string">&#x27;Initial app boilerplate&#x27;</span></span><br><span class="line"><span class="variable">$ </span>git push heroku master <span class="comment"># deploy code to heroku</span></span><br><span class="line"><span class="variable">$ </span>heroku <span class="symbol">ps:</span>scale web=<span class="number">1</span>  <span class="comment"># run the app with a 1 heroku &quot;dyno&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>Redeploy</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git status <span class="comment"># view the changes</span></span><br><span class="line"><span class="variable">$ </span>git add .  <span class="comment"># add all the changes</span></span><br><span class="line"><span class="variable">$ </span>git commit -m <span class="string">&#x27;a description of the changes&#x27;</span></span><br><span class="line"><span class="variable">$ </span>git push heroku master</span><br></pre></td></tr></table></figure></li></ol><h3 id="Trouble-shooting"><a href="#Trouble-shooting" class="headerlink" title="Trouble shooting"></a>Trouble shooting</h3><ol><li>what if App deployment fails? Try find out the deployment details by <code>heroku logs --tail</code></li></ol><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference:"></a>Reference:</h3><p><a href="https://dash.plotly.com/introduction">https://dash.plotly.com/introduction</a><br><a href="https://www.heroku.com/">https://www.heroku.com/</a><br><a href="https://dash.plotly.com/layout">https://dash.plotly.com/layout</a></p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> heroku, dash, plotly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker a comprehensive getting started tool</title>
      <link href="2020/12/06/docker/"/>
      <url>2020/12/06/docker/</url>
      
        <content type="html"><![CDATA[<p><img src="https://lh3.googleusercontent.com/RczxTqAIP_RbdrfSQO-dDnxDzGapxe5D-vJFEueZIP-uuSOgdeeBN8ft2fg4fpwOu4sVAFNC65dpGC1w1lPmeNgtvV512rziQdNM2AMXpIkjHOPjDQPSL3m6o02f65cIEzFs2R-UVA=w2400"></p><p><a href="https://drive.google.com/file/d/1PjWk8VxxkChf8MZ45FW-l5_pBtpbDrj5/view?usp=sharing">PDF version</a></p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Another AB testing learning with Cases (!)</title>
      <link href="2020/11/17/another-AB-testing/"/>
      <url>2020/11/17/another-AB-testing/</url>
      
        <content type="html"><![CDATA[<h1 id="A-B-testing"><a href="#A-B-testing" class="headerlink" title="A/B testing"></a>A/B testing</h1><p><img src="https://lh3.googleusercontent.com/VdPJrIaeA8kiO-cW4WZ0L503_yJGrLW_y2aA1xyxWiWdDSaDjZGSOPRHSpjCRlVJyCkE1lBgoGymMGvsrpktfEpaPLcGs3dJ-447aUjhcxoQnwUMaGdhoEu2YsGaqE1W3R9-AaIm2g=w2400" alt="AB test"></p><h2 id="Why-should-you-run-AB-test"><a href="#Why-should-you-run-AB-test" class="headerlink" title="Why should you run AB test"></a>Why should you run AB test</h2><h3 id="When-to-run"><a href="#When-to-run" class="headerlink" title="When to run"></a>When to run</h3><ul><li>Deciding whether or not to launch</li><li>Quantify the impact of a feature or product</li><li>Compare data with intuition</li></ul><h2 id="10-steps"><a href="#10-steps" class="headerlink" title="10 steps"></a>10 steps</h2><h3 id="Define-your-goal-and-form-hypothesese"><a href="#Define-your-goal-and-form-hypothesese" class="headerlink" title="Define your goal and form hypothesese"></a>Define your goal and form hypothesese</h3><h3 id="Identify-control-and-treatment"><a href="#Identify-control-and-treatment" class="headerlink" title="Identify control and treatment"></a>Identify control and treatment</h3><h3 id="Identify-key-metrics-to-measure"><a href="#Identify-key-metrics-to-measure" class="headerlink" title="Identify key metrics to measure"></a>Identify key metrics to measure</h3><h3 id="Identify-what-data-needs-to-be-collected"><a href="#Identify-what-data-needs-to-be-collected" class="headerlink" title="Identify what data needs to be collected"></a>Identify what data needs to be collected</h3><h3 id="make-sure-the-appropriate-logging-is-in-place-to-collect-all-necessary-data"><a href="#make-sure-the-appropriate-logging-is-in-place-to-collect-all-necessary-data" class="headerlink" title="make sure the appropriate logging is in place to collect all necessary data"></a>make sure the appropriate logging is in place to collect all necessary data</h3><h3 id="Determine-how-small-of-a-difference-you-would-like-to-detect"><a href="#Determine-how-small-of-a-difference-you-would-like-to-detect" class="headerlink" title="Determine how small of a difference you would like to detect"></a>Determine how small of a difference you would like to detect</h3><h3 id="Determine-what-fraction-of-visitors-you-want-to-be-in-the-treatment"><a href="#Determine-what-fraction-of-visitors-you-want-to-be-in-the-treatment" class="headerlink" title="Determine what fraction of visitors you want to be in the treatment"></a>Determine what fraction of visitors you want to be in the treatment</h3><h3 id="Run-a-power-analysis-to-decide-how-much-data-you-need-and-how-long-you-need-to-run-the-test"><a href="#Run-a-power-analysis-to-decide-how-much-data-you-need-and-how-long-you-need-to-run-the-test" class="headerlink" title="Run a power analysis to decide how much data you need and how long you need to run the test"></a>Run a power analysis to decide how much data you need and how long you need to run the test</h3><h3 id="Run-the-test-for-AT-LEAST-this-long"><a href="#Run-the-test-for-AT-LEAST-this-long" class="headerlink" title="Run the test for AT LEAST this long"></a>Run the test for AT LEAST this long</h3><h3 id="First-time-trying-something-new-run-an-A-A-test-dummy-test-simultaneously-to-check-for-systematic-biases"><a href="#First-time-trying-something-new-run-an-A-A-test-dummy-test-simultaneously-to-check-for-systematic-biases" class="headerlink" title="First time trying something new: run an A/A test (dummy test) simultaneously to check for systematic biases"></a>First time trying something new: run an A/A test (dummy test) simultaneously to check for systematic biases</h3><h2 id="case-1-green-or-red-button"><a href="#case-1-green-or-red-button" class="headerlink" title="case 1: green or red button"></a>case 1: green or red button</h2><h3 id="10-steps-1"><a href="#10-steps-1" class="headerlink" title="10 steps"></a>10 steps</h3><ul><li><p>Goal: quantify the impact a different color of button has on metric; hypotheses: green is better, and will increase revenue, especially on mobile</p></li><li><p>Control: red button; treatment: green button</p></li><li><p>Metrics</p><ul><li><p>Revenue</p></li><li><p>Purchase rate</p><ul><li>per visitor</li><li>per clicker</li></ul></li><li><p>CTR</p><ul><li>click per visit</li><li>click per visitor</li></ul></li><li><p>Others</p><ul><li>Bounce rate</li><li>Time spent on the site</li><li>Return visit</li><li>Engagement with other parts of the website</li><li>Referrals</li><li>etc.</li></ul></li></ul></li><li><p>Data</p><ul><li>User id</li><li>cookie id</li><li>platform</li><li>page load</li><li>experiment assignment</li><li>if the user sees a button and which color</li><li>clicks or not</li><li>data for other metrics</li></ul></li><li><p>make sure the logging is in place</p><ul><li>how does it work</li><li>what if click back button</li></ul></li><li><p>How much difference to detect</p><ul><li>10% increase for example</li></ul></li><li><p>fraction of users in treatment</p><ul><li>50 50 is the easiest and take the least time to run</li></ul></li><li><p>how many data (power analysis)</p><ul><li>fp rate = type 1 error = alpha = falsely reject the null = significance level</li><li>fn rate = type 2 error = beta = false accept the null = 1-power</li></ul></li><li><p>Dummy test</p></li></ul><h3 id="potential-problems"><a href="#potential-problems" class="headerlink" title="potential problems"></a>potential problems</h3><ul><li><p>user can be assigned to both t and c group</p><ul><li>remove these users at the end of experiment</li><li>50/50 split to avoid biasing treatment group</li></ul></li></ul><h2 id="case-2-a-new-landing-page-on-an-online-marketplace"><a href="#case-2-a-new-landing-page-on-an-online-marketplace" class="headerlink" title="case 2: a new landing page on an online marketplace"></a>case 2: a new landing page on an online marketplace</h2><h3 id="10-steps-2"><a href="#10-steps-2" class="headerlink" title="10 steps"></a>10 steps</h3><ul><li><p>Goal: identify the impact of page on user behavior; hypotheses: this is more attractive; the next page is relevant</p></li><li><p>treatment and control:</p><ul><li>control: old page</li><li>treatment 1: just home page</li><li>treatment 2: home page and content page</li><li>make sure only one thing changes between treatment and control</li></ul></li><li><p>metrics</p><ul><li><p>between C and T1: bounce rate</p></li><li><p>between T1 and T2: number of transactions</p></li><li><p>other metrics</p><ul><li>CTR</li><li>search</li><li>time on site</li></ul></li></ul></li><li><p>data</p><ul><li>user id</li><li>cookie id</li><li>platform</li><li>page load</li><li>assignment</li><li>if they click on a reconmmendation</li></ul></li><li><p>make sure logging in place</p></li><li><p>how small the difference</p><ul><li><p>bounce rate</p><ul><li>current: 50%</li><li>new: 45%</li></ul></li><li><p>transaction</p><ul><li>current: 0.05</li><li>new: 0.051</li></ul></li></ul></li><li><p>fraction of visitors</p><ul><li>1-1-1</li></ul></li><li><p>power test: how much data</p><ul><li>T1 vs T2, and multiply y 3</li></ul></li><li><p>how to launch</p></li><li><p>dummy test</p></li></ul><h3 id="multi-armed-bandit-approach"><a href="#multi-armed-bandit-approach" class="headerlink" title="multi-armed bandit approach"></a>multi-armed bandit approach</h3><ul><li>maximize revenue during this experiment period</li><li>adjust fraction of new users in treatment/control according to which group seems to be doing better</li></ul><h2 id="case-3-price-recommendation-on-an-online-marketplace"><a href="#case-3-price-recommendation-on-an-online-marketplace" class="headerlink" title="case 3: price recommendation on an online marketplace"></a>case 3: price recommendation on an online marketplace</h2><h3 id="goal-quantify-the-impact-of-suggesting-prices-to-vendors-on-revenue-and-vendor-loyalty-hypo-offering-suggestions-will-make-it-easier-to-be-a-vendor-and-also-maximize-revenue"><a href="#goal-quantify-the-impact-of-suggesting-prices-to-vendors-on-revenue-and-vendor-loyalty-hypo-offering-suggestions-will-make-it-easier-to-be-a-vendor-and-also-maximize-revenue" class="headerlink" title="goal: quantify the impact of suggesting prices  to vendors on revenue and vendor loyalty; hypo: offering suggestions will make it easier to be a vendor, and also maximize revenue"></a>goal: quantify the impact of suggesting prices  to vendors on revenue and vendor loyalty; hypo: offering suggestions will make it easier to be a vendor, and also maximize revenue</h3><h3 id="treatment-and-control"><a href="#treatment-and-control" class="headerlink" title="treatment and control"></a>treatment and control</h3><ul><li><p>wrong way to do this</p><ul><li>control: vendor do not take the suggestion; treatment: vendors take</li><li>this is not randomized, because vendors who sell good are probably not taking suggestions</li></ul></li><li><p>another wrong way to do this</p><ul><li>control: vendors choose own price; treatment: vendors see price suggestions</li><li>why it is wrong: when a buyer see 3 prices from 3 vendors and see a lower price from treatment, this sale is “stolen” from control group</li><li>this is called cannibalization</li></ul></li><li><p>right way to do</p><ul><li><p>in the perfect world</p><ul><li>control: all vendor set their own price</li><li>treatment: all vendors can use our price suggestions</li></ul></li><li><p>in reality</p><ul><li>control: categories where no vendors are offered price suggestions</li><li>treatment: categories where all vendors are offered price suggestions</li><li>remove most popular categories</li><li>randomize remaining categories</li><li>make sure the categories are independent</li><li>check historically that there are no significant difference</li></ul></li><li><p>tips on categories level</p><ul><li>large number of categories</li><li>only rather large difference can be measured</li><li>use sparingly</li></ul></li></ul></li></ul><p>Ref: <a href="https://learning.oreilly.com/videos/a-b-testing-a/9781491934777">https://learning.oreilly.com/videos/a-b-testing-a/9781491934777</a></p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AB_test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AB Test Learning Mind Map</title>
      <link href="2020/11/10/ABtest-bit-tiger/"/>
      <url>2020/11/10/ABtest-bit-tiger/</url>
      
        <content type="html"><![CDATA[<p><img src="https://lh3.googleusercontent.com/9iuB4NJj8PB8kgIk7PoLVide-P34UsgHKhWegmIs282pxvt6T3e0Zr0WCf95tQpfs4N27lK7xPOtw_nvw7R9MV9AMMpA2ZhYrRPmTV_-i74177UWPejhTdSKPvmlq3mleNvAA4dhgg=w2400"></p><p><img src="https://lh3.googleusercontent.com/naJjm7cfspq_cxQETNcv6OaBhEdo_FeLlU3AQBOf_CPcI3mw2SLRMxwaDHfigiplcLOOSZMjrxLHVfId7-8bbYmeN8vLITuu_v6vHxyobk4G7jv_EA7vGhZ_BOBIlILORVT3mFHPag=w2400" alt="Sample size calculation"></p><p><img src="https://lh3.googleusercontent.com/MLZndLd6oQ2mUbpkYYilsFGLj2Dp47es5nNRjAcTp3a4-Ny6stf5AGB1zY4Qjnz4DYZsgF0FnSXzOH5JSvf_qDgXrX_2ImSgTMkX4gukc9zgQM1c2_GOQLXXZdkWc_W1ULwDbS6kQw=w2400" alt="Matching for T/C groups"></p><p>resource: BitTiger AB test</p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AB_test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fall color trip 深南秋日之旅</title>
      <link href="2020/10/30/test/"/>
      <url>2020/10/30/test/</url>
      
        <content type="html"><![CDATA[<p><img src="https://lh3.googleusercontent.com/tPDZ9cr9efhtcHg33m4w8DHx4BF4kJBmnH5gH172lf5cW8SirXFWGKJ-RQvJ_1Z6knQMo5b5H4WNw38wjf7vEnmTJahlQWhvd2yaARKnttVuPcICwmBO660sWr_E61arTX2NuEvDig=w2400" alt="Smokies"></p>]]></content>
      
      
      <categories>
          
          <category> Journey </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Journey </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
